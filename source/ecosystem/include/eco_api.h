#pragma once

#ifdef ECO_EXPORTS
#ifdef ECO_API
#undef ECO_API
#endif
#define ECO_API __declspec(dllexport)
#else
#define ECO_API __declspec(dllimport)
#endif

#ifdef FOR_LINUX
#ifdef ECO_API
#undef ECO_API
#endif
#define ECO_API __attribute__((__visibility__("default")))
#endif

#include <string>
#include <vector>

#include "../../engine/include/verrors.h"
#include "../../engine/include/vtypes.h"
#include "../../engine/include/vvalue.h"

class TpException;

#ifdef __cplusplus
extern "C" {
#endif

namespace konan {
	namespace eco {

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// 코난 딥러닝 프레임워크 에코 시스템의 버전을 알려줍니다.
		///
		/// @returns	코난 딥러닝 프레임워크 에코 시스템의 버전 문자열
		////////////////////////////////////////////////////////////////////////////////////////////////////

		ECO_API const char* getEcoVersion() noexcept;

		class Object;
		class Exception;

		class NN;
		class Module;
		class Tensor;
		class Function;
		class Metric;
		class Scalar;
		class Loss;
		class Parameters;
		class Optimizer;
		class Account;
		class AudioSpectrumReader;

			typedef std::vector<std::string> StringList;
			typedef std::vector<Module> ModuleList;
			typedef std::vector<Tensor> TensorList;
			typedef std::map<int, Tensor> TensorMap;
			typedef std::map<std::string, Loss> LossDict;
			typedef std::map<std::string, Tensor> TensorDict;
			typedef std::map<std::string, Metric> MetricDict;

			class Object {
			protected:
				Object(void* core);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// API 지원용 클래스 객체를 파괴합니다.
				/// 이들 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 캡슐 객체의 파괴는 코어 객체의 참조계수를 감소시키며 참조계수가 0이 될 때에만 실제 코어 객체가 파괴됩니다.
				/// 한편 캡슐 객체 생성 함수는 API로 제공되지 않는데 이는 캡슐 객체는 구체적인 클래스 객체 형태로만 생성 가능하기 때문입니다.
				///
				/// @returns	파괴자는 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API ~Object();
				void* m_core;
				//int m_nRefCnt;

			public:
				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// API 지원용 클래스 객체가 갖는 내부 코어 객체의 주소를 반환합니다.
				/// 내부 코어 객체 주소를 이용하여 새로운 캡슐 객체를 생성할 수 있기 때문에 여러 생황에서 객체 정보 전달용으로 사용이 가능합니다.
				///
				/// @returns	클래스 객체가 갖는 내부 코어 객체의 주소
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void* get_core();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// API 지원용 클래스 객체가 갖는 내부 코어 객체의 주소를 반환하면서 그 참조계수를 1 증가시켜 줍니다.
				/// 내부 코어 객체 주소를 이용하여 새로운 캡슐 객체를 생성할 수 있기 때문에 여러 생황에서 객체 정보 전달용으로 사용이 가능합니다.
				/// 참조 계수를 증가시켜 클래스 객체 파괴 시에도 내부 코어 객체가 파괴되지 않고 유지되게 만들 수 있습니다.
				/// 객체의 사용이 끝난 후에는 free() 메소드를 호출해주어야 하며 그렇지 않은 경우 릭 발생의 원인이 됩니다.
				///
				/// @returns	클래스 객체가 갖는 내부 코어 객체의 주소
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void* clone_core();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// API 지원용 클래스 객체가 갖는 내부 코어 객체의 고유번호를 반환합니다.
				/// 디버깅 등의 목적에 사용 가능합니다.
				///
				/// @returns	클래스 객체의 고유번호, 캡슐 뿐이고 코어가 없는 빈 객체이면 -1
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int get_local_id();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// API 지원용 클래스 객체가 갖는 내부 코어 객체의 참조계수를 1 감소시켜 줍니다.
				/// 이 때 참조계수가 0이 되면 내부 코어 객체가 파괴되면서 보유중이던 자원을 반납하게 됩니다.
				/// clone_core()를 호출해 내부 코어 객체 참조계수를 강제 증가시킨 경우 이 메소드 호출을 소홀히 하면 메모리 릭이 발생할 수 있습니다.
				/// 반대로 잘못된 free() 호출로 인해 아직 기능 중인 내부 객체가 파괴되어 문제가 발생할 수 있으므로 사용에 유의하여야 합니다.
				/// 
				/// @param 	core	참조 계수를 감소시킬 내부 코어 객체의 주소
				/// 			
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 
				ECO_API static void free(void* core);
			};

			class EcoException : public Object {
			public:
				EcoException(void* errInfo, string func, string cinfo);
				EcoException(TpException& ex, string func, string cinfo);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// EcoException 클래스의 복사생성자입니다.
				/// EcoException 클래스는 에코시스템 처리 과정에서 일어나는 각종 오류 상황에 대해 오류 정보를 담아 전달하기 위한 객체 구조입니다.
				/// 에코시스템 내부에서 던져지는 형태로 활용되기 때문에 다른 유형의 생성자는 API 메소드로 지원되지 않습니다.
				/// API 사용 코드에서는 각종 API 메소드 호출 시 여러 형태의 예외 상황이 발생해 EcoException 객체가 던져질 수 있기 때문에 try-catch 구조를 잘 이용해야 합니다.
				///
				/// @param 	a	복사할 원본 객체 참조 변수입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API EcoException(const EcoException& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// EcoException 클래스의 치환연산자입니다.
				///
				/// @param 	a	치환에 이용할 원본 객체 참조 변수입니다.
				///
				/// @returns	연속된 치환이 가능하도록 치환된 객체의 참조 주소를 반환합니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API EcoException& operator=(const EcoException& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// EcoException 클래스 객체에 저장된 오류 코드 값을 반환합니다.
				///
				///
				/// @returns	클래스 객체에 저장된 오류 코드 값
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int get_error_code() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// EcoException 클래스 객체에 저장된 오류 메시지 문자열 값을 반환합니다.
				///
				/// @param 	indent	여러 줄로 구성된 오류 메시지의 경우에 출력에 편리하도록 개행시의 넣어쓰기 문자수를 지정합니다.
				///
				/// @returns	개행 넣어쓰기 처리를 거친 클래스 객체의 오류메시지 문자열
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API string get_error_message(int indent) const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// EcoException 클래스 객체의 오류 메시지 문자열 구성 방식을 설정합니다.
				/// bForDevelopper 값이 true이면 수집된 모든 오류 정보를 오류 메시지 출력에 반영합니다.
				/// bForDevelopper 값이 false이면 최초의 예외 발생 위치와 API 호출 지점 정보만을 오류 메시지 출력에 반영합니다.
				///
				/// @param 	bForDevelopper	오류 메시지 구성 방식을 지정하는 모드 정보
				///
				/// returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API static void setDevelopperMode(bool bForDevelopper);
			};

			class NN : public Object {
			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// NN 클래스의 공백 생성자입니다.
				/// 코어 객체 내용이 비어있는 텐서 객체를 생성하고 객체를 반환합니다.
				/// 비어있는 객체 생성자는 NN 틀래스 객체를 멤버로 갖는 새로운 클래스를 만들 때 필요합니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API NN();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// NN 클래스의 생성자입니다.
				/// NN 클래스는 딥러닝 프레임워크 연결을 맺고 이를 이용해 신경망(Neural Network) 알고리즘 처리를 위한 각종 기능을 제공하는 에코 시스템의 중추적 역할을 하는 핵심 클래스입니다.
				/// NN 클래스에 연결되는 딥러닝 프레임워크는 pUrl 문자열로 지정되는 위치에서 찾게 됩니다.
				///
				/// @param 	pUrl	연결할 프레임워크의 URL 값. 원격 접속이 아닌 경우 "localhost" 혹은 "127.0.0.1"을 이용함
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API NN(const char* pUrl);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진과의 로컬/원격 연결을 지원하는 NN 클래스의 생성자입니다.
				/// NN 클래스는 딥러닝 프레임워크 연결을 맺고 이를 이용해 신경망(Neural Network) 알고리즘 처리를 위한 각종 기능을 제공하는 에코 시스템의 중추적 역할을 하는 핵심 클래스입니다.
				/// NN 클래스에 연결되는 딥러닝 프레임워크는 url 문자열로 지정되는 위치에서 찾게 됩니다.
				///
				/// @param 	server_url	연결할 프레임워크의 URL 값.
				/// @param 	client_url	콜백 수신용 URL.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API NN(std::string server_url, std::string client_url);

			public:
				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// NN 클래스의 코어 전달 생성자입니다.
				/// NN 클래스 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 이 생성자는 다른 캡슐 객체의 getCore() 메소드나 getClone() 메소드로 추출된 코어 객체 포인터를 이용해 새로운 캡슐 객체를 생성합니다.
				/// 이 때 코어 객체의 참조계수가 1 증가하며 증가된 값은 캡슐 객체가 파괴될 때 감소합니다.
				///
				/// @param core	생성되는 클래스 객체가 내부에 가져야 할 코어 객체의 포인터입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API NN(void* core);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// NN 클래스의 복사생성자입니다.
				///
				/// @param 	a	복사할 원본 객체 참조 변수입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API NN(const NN& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// NN 클래스의 치환 연산자입니다.
				///
				/// @param 	a	치환에 이용할 원본 객체 참조 변수입니다.
				///
				/// @returns	연속된 치환이 가능하도록 치환된 객체의 참조 주소를 반환합니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API NN& operator=(const NN& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// NN 클래스 객체를 파괴합니다.
				/// NN 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 캡슐 객체의 파괴는 코어 객체의 참조계수를 감소시키며 참조계수가 0이 될 때에만 실제 코어 객체가 파괴됩니다.
				///
				/// @returns	파괴자는 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API ~NN();

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// NN 클래스 객체를 통해 연결된 코난 딥러닝 프레임워크 엔진의 버전을 알려줍니다.
				///
				/// @returns	코난 딥러닝 엔진의 버전 문자열
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API string get_engine_version();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// NN 클래스 객체를 통해 연결된 코난 딥러닝 프레임워크 엔진이 쿠다 연산을 지원하는지 알려줍니다.
				/// 쿠다 연산 지원은 각종 딥러닝 알고리즘의 고속 처리를 위해 매우 중요한 기능입니다.
				///
				/// @returns	쿠다 연산이 지원되면 true, 아니면 false
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API bool cuda_is_available() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// NN 클래스 객체를 통해 연결된 코난 딥러닝 프레임워크 엔진의 쿠다 디바이스 수를 알려줍니다.
				/// 쿠다 디바이스가 여럿 지원되면 병렬 수행을 통해 각종 딥러닝 알고리즘의 처리 속도를 다소 높일 수 있습니다.
				///
				/// @returns	병렬 처리 가능한 쿠다 디바이스의 수
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int cuda_get_device_count() const;

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 에코 시스템 및 딥러닝 프레임워크 엔진의 난수 발생기에 씨앗 값을 설정합니다.
				///
				/// @param 	random_seed	난수 발생기 씨앗값, 임의의 난수 발생을 원하면 time(NULL), 고정된 순서의 난수 발생을 원하면 고정된 특정 값을 지정
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void srand(int64 random_seed);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 딥러닝 알고리즘 처리 과정 중에 기울기 처리가 필요 없음을 알려줍니다.
				/// 기울기 처리는 학습에 필수적입니다.
				/// 하지만 테스트나 추론 과정에서는 이 메소드를 호출해 불필요한 처리 부담을 줄이게 할 수 있습니다.
				/// 			
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void set_no_grad();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진이 딥러닝 알고리즘 처리 과정 중에 기울기 처리가 필요함을 알려줍니다.
				/// 보통 set_no_grad() 호출과 짝을 맞추어 테스트나 추론 과정을 감싸는 형태로 사용됩니다.
				/// 			
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void unset_no_grad();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 연산 추적기 사용을 하지 않도록 지시합니다.
				/// 연산 추적기는 딥러닝 알고리즘의 안정적이며 효율적인 처리를 가능하게 해주는 코난 딥러닝 프레임워크의 특징적인 기능입니다.
				/// 보통 사용하지 않을 이유가 없지만 디버깅 등 특별한 목적이 있을 때 이 명령을 통해 사용을 중지시킬 수 있습니다.
				/// 			
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void set_no_tracer();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 연산 추적기 사용을 재개하도록 지시합니다.
				/// 			
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void unset_no_tracer();

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에서 지원하고 있는 내장 유형들을 도메인별 리스트 형태의 목록으로 반환합니다.
				/// custom, model, layer, network, loss, optimizer, function 도메인들이 키가 되고
				/// 각 도메인에서 지원되는 내장 유형들의 이름 리스트가 값이 됩니다.
				/// 				
				/// @returns	지원하는 유형의 도메인별 이름 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VDict get_builtin_names();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에서 지원하고 있는 특정 도메인의 유형 이름 리스트를 반환합니다.
				///
				/// @param 	domain	조사할 이름의 도메인, custom, model, layer, network, loss, optimizer, function 가운데 하나
				/// 				
				/// @returns	지원하는 유형의 이름 리스트
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API StringList get_builtin_names(string domain);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 지정된 유형 이름이 딥러닝 프레임워크 엔진에서 지원하는 특정 도메인의 항목인지를 알려줍니다.
				///
				/// @param 	domain	조사할 이름의 도메인, custom, model, layer, network, loss, optimizer, function 가운데 하나
				/// @param 	sBuiltin	The builtin.
				///
				/// @returns	지원 항목이면 true, 아니면 false
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API bool is_builtin_name(string domain, string sBuiltin);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진이 지정된 이름의 레이어를 처리하기 위해 사용하는 수식 내용을 반환합니다.
				///
				/// @param 	layerName	수식 내용을 조회할 레이어의 유형 이름
				///
				/// @returns	해당 레리어를 처리하기 위해 사용하는 수식 내용
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API string get_layer_formula(string layerName);

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진의 자원 관리 모니터링을 위해 삭제되지 않은 엔진 객체의 목록 및 관련 정보를 반환합니다.
				///
				/// @param 	sessionOnly		true면 연결 세션에 대해서만 조사, false면 세션에 관계 없이 모든 객체 조사
				///
				/// @returns	삭제되지 않은 객체의 목록 및 관련 정보를 포함하는 사전 정보
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VDict get_leak_info(bool sessionOnly);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진의 자원 관리 모니터링을 위해 삭제되지 않은 엔진 객체의 목록 및 관련 정보를 출력합니다.
				///
				/// @param 	sessionOnly		true면 연결 세션에 대해서만 조사, false면 세션에 관계 없이 모든 객체 조사
				/// 			
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void dump_leak_info(bool sessionOnly);

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 지정된 모듈의 구성 및 파라미터 내용을 지정된 경로의 파일에 저장합니다.
				/// 저장되는 내용에는 모듈 자체는 물론 모든 자식 모듈 및 후손 모듈을 포함합니다.
				/// 보통 모델을 저장하기 위해 모델의 루트 역할을 하는 모듈을 대상으로 하여 호출됩니다.
				///
				/// @param 	module  	파일에 저장할 루트 모듈 객체
				/// @param 	filename	모듈 내용을 저장할 파일 경로명
				/// 			
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void save_module(Module module, string filename);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 지정된 파일 내용에 따라 모듈을 구성하고 파라미터를 읽어들입니다.
				/// 보통 파일에 저장된 모델 구조 및 상태를 복원하기 위하여 호출됩니다.
				///
				/// @param 	filename	모듈 내용을 읽어들일 파일 경로명
				///
				/// @returns	생성된 모델 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module load_module(string filename);

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 사용자 정의 레이어 모듈 객체를 생성하여 반납합니다.
				///
				/// @param 	name	 	생성할 사용자 정의 레이어의 이름
				/// @param 	formula  	생성할 사용자 정의 레이어가 처리할 수식
				/// @param 	paramInfo	생성할 사용자 정의 레이어가 갖게 될 파라미터에 대한 구성 정보
				/// @param 	kwArgs   	사용자 정의 레이어 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 사용자 정의 레이어 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module create_user_defined_layer(string name, string formula, VDict paramInfo, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 지정된 모듈 구조를 매크로로 등록합니다.
				///
				/// @param 	macroName	매크로 레이어 생성에 이용할 매크로 이름
				/// @param 	contents 	매크로로 등록할 내용에 해당하는 모듈 객체
				/// @param 	kwArgs   	매크로 등록에 사용할 각종 옵션 정보
				/// 			
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void regist_macro(string macroName, Module contents, VDict kwArgs);

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 등록된 내장 모델 구조 정보를 이용해 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	modelName	딥러닝 프레임워크 엔진에 내장 모델로 등록된 모델 유형 이름
				/// @param 	kwArgs   	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Model(string modelName, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 등록된 매크로 정보를 이용해 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	macroName	매크로 확장 대상이 되는 등록된 매크로 정보의 이름
				/// @param 	kwArgs   	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Macro(string macroName, VDict kwArgs);

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 조건을 검사해 참인 경우 trueModule, 그렇지 않은 경우 빈 모델 객체를 반환합니다.
				///
				/// @param 	cond	  	선택에 사용될 부울 값
				/// @param 	trueModule	조건이 참인 경우 반환될 모델 객체
				///
				/// @returns	선택된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module If(bool cond, Module trueModule);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 조건을 검사해 참인 경우 trueModule, 그렇지 않은 경우 falseModule 객체를 반환합니다.
				///
				/// @param 	cond	  	선택에 사용될 부울 값
				/// @param 	trueModule	조건이 참인 경우 반환될 모델 객체
				/// @param 	falseModule	조건이 거짓인 경우 반환될 모델 객체
				///
				/// @returns	선택된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module If(bool cond, Module trueModule, Module falseModule);

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 단순 선형 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Linear(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 단순 선형 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Dense(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 전체 연결 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Conv(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 컨볼루션 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Conv1D(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 1차원 컨볼루션 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Conv2D(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 역상형 2차원 컨볼루션 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Conv2D_Transposed(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 확장형 2차원 컨볼루션 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Conv2D_Dilated(VDict kwArgs);


				ECO_API Module Deconv(VDict kwArgs);


				ECO_API Module Max(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 평균치 풀링 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Avg(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 순환 신경망 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Rnn(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 LSTM 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Lstm(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 GRU 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Gru(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 임베드 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Embed(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 드롭아웃 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Dropout(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 부분 추출 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Extract(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 멀티헤드 어텐션 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module MultiHeadAttention(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 바이어스 가산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module AddBias(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 형상 평탄화 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Flatten(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 형상 변경 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Reshape(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 전역 평균치 풀링 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module GlobalAvg(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 단순 선형 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module AdaptiveAvg(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 전치 형상 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Transpose(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 레이어 정규화 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Layernorm(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 배치 정규화 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Batchnorm(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 형상 확장 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Upsample(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 쌓기 합병 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Concat(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 기능 없는 통과 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Pass(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 잡음 추가 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Noise(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 난수 발생 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Random(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 반올림 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Round(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 코드 변환 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module CodeConv(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 코사인 유사도 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module CosineSim(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 N-Top 선정 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module SelectNTop(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 N-Top 위치 추출 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module SelectNTopArg(VDict kwArgs);


				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 비선형 활성화 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Activate(VDict kwArgs);


				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 ReLU 방식의 비선형 활성화 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module ReLU(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 LeakyReLU 방식의 비선형 활성화 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Leaky(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 Softmax 방식의 비선형 활성화 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Softmax(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 Sigmoid 방식의 비선형 활성화 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Sigmoid(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 Tanh 방식의 비선형 활성화 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Tanh(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 GeLU 방식의 비선형 활성화 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Gelu(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 Mish 방식의 비선형 활성화 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Mish(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 Swish 방식의 비선형 활성화 연산 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Swish(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 자식 모듈들을 순차 처리하는 복합 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	children	자식노드들의 리스트
				/// @param 	kwArgs  	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Sequential(ModuleList children, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 자식 모듈들을 병렬 처리하는 복합 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	children	자식노드들의 리스트
				/// @param 	kwArgs  	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Parallel(ModuleList children, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 자식 모듈들을 합산 처리하는 복합 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	children	자식노드들의 리스트
				/// @param 	kwArgs  	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Add(ModuleList children, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 자식 모듈들을 순차 처리한 후 최초 입력을 합산하는 복합 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	children	자식노드들의 리스트
				/// @param 	kwArgs  	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Residual(ModuleList children, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 자식 모듈들을 순차 처리한 후 최초 입력을 출력으로 바이패스하는 복합 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	children	자식노드들의 리스트
				/// @param 	kwArgs  	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Pruning(ModuleList children, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 자식 모듈들의 처리 결과를 쌓아 출력을 구성하는 복합 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	children	자식노드들의 리스트
				/// @param 	kwArgs  	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Stack(ModuleList children, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 자식 모듈들을 순차 처리한 후 Squeeze-and-Excitation 방식으로 레지듀얼 처리를 수행하는 복합 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	children	자식노드들의 리스트
				/// @param 	kwArgs  	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module SqueezeExcitation(ModuleList children, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 지정된 수식 내용에 따라 처리하는 사용자 정의 레이어 모듈 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	formula	모듈 구조 생성에 사용할 수식 내용, 생략된 변형 함수에서는 kwArgs["formula"]으로 대체
				/// @param 	kwArgs 	모듈 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module Formula(string formula, VDict kwArgs);
				ECO_API Module Formula(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 Mean Squared Error 방식으로 손실함수 값을 계산하는 손실 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	kwArgs  	손실 구조 생성에 사용할 수식 내용
				/// @param 	sEstName	손실 함수값 계산에 사용할 추정치 성분을 획득하기 위해 사용할 이름
				/// @param 	sAnsName	손실 함수값 계산에 사용할 정답치 성분을 획득하기 위해 사용할 이름
				///
				/// @returns	생성된 손실 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Loss MSELoss(VDict kwArgs, string sEstName, string sAnsName);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 크로스 엔트로피 방식으로 손실함수 값을 계산하는 손실 구조를 생성하고 객체를 반환합니다.
				/// 구체적 계산 방법은 다양한 크로스 엔트로피 방식 가운데 추정치와 정답치의 형상 및 데이터 타입에 따라 자동선택됩니다.
				///
				/// @param 	kwArgs  	손실 구조 생성에 사용할 수식 내용
				/// @param 	sEstName	손실 함수값 계산에 사용할 추정치 성분을 획득하기 위해 사용할 이름
				/// @param 	sAnsName	손실 함수값 계산에 사용할 정답치 성분을 획득하기 위해 사용할 이름
				///
				/// @returns	생성된 손실 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Loss CrossEntropyLoss(VDict kwArgs, string sLogitName, string sLabelName);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 이진 크로스 엔트로피 방식으로 손실함수 값을 계산하는 손실 구조를 생성하고 객체를 반환합니다.
				/// 이진 크로스 엔트로피 방식의 계산을 위해서는 추정치 텐서와 평가치 텐서가 같은 형상이어야 합니다.
				///
				/// @param 	kwArgs  	손실 구조 생성에 사용할 수식 내용
				/// @param 	sEstName	손실 함수값 계산에 사용할 추정치 성분을 획득하기 위해 사용할 이름
				/// @param 	sAnsName	손실 함수값 계산에 사용할 정답치 성분을 획득하기 위해 사용할 이름
				///
				/// @returns	생성된 손실 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Loss BinaryCrossEntropyLoss(VDict kwArgs, string sLogitName, string sLabelName);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 시그모이드 크로스 엔트로피 방식으로 손실함수 값을 계산하는 손실 구조를 생성하고 객체를 반환합니다.
				/// 시그모이드 크로스 엔트로피 방식의 계산은 이진 크로스 엔트로피 방식과 동일합니다.
				/// 따라서 CrossEntropySigmoidLoss() 메소드는 BinaryCrossEntropyLoss() 메소드의 다른 이름에 해당합니다.
				///
				/// @param 	kwArgs  	손실 구조 생성에 사용할 수식 내용
				/// @param 	sEstName	손실 함수값 계산에 사용할 추정치 성분을 획득하기 위해 사용할 이름
				/// @param 	sAnsName	손실 함수값 계산에 사용할 정답치 성분을 획득하기 위해 사용할 이름
				///
				/// @returns	생성된 손실 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Loss CrossEntropySigmoidLoss(VDict kwArgs, string sLogitName, string sLabelName);	// will be preciated

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 인덱스 사용 소프트맥스 크로스 엔트로피 방식으로 손실함수 값을 계산하는 손실 구조를 생성하고 객체를 반환합니다.
				/// 인덱스 사용 소프트맥스 크로스 엔트로피 방식에서는 정답치가 원-핫 벡터 대신 정답항 위치를 나타내는 정수형 텐서이어야 합니다.
				///
				/// @param 	kwArgs  	손실 구조 생성에 사용할 수식 내용
				/// @param 	sEstName	손실 함수값 계산에 사용할 추정치 성분을 획득하기 위해 사용할 이름
				/// @param 	sAnsName	손실 함수값 계산에 사용할 정답치 성분을 획득하기 위해 사용할 이름
				///
				/// @returns	생성된 손실 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Loss CrossEntropyPositiveIdxLoss(VDict kwArgs, string sLogitName, string sLabelName);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 복수의 손실 객체들로 구성되는 손실 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	losses  	자식 손실 객체들의 리스트
				///
				/// @returns	생성된 손실 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Loss MultipleLoss(LossDict losses);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 사용자 정의 수식을 이용해 손실함수 값을 계산하는 손실 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	lossTerms  	손실 함수값으로 설정된 하나 이상의 항목에 대한 수식 목록
				/// @param 	statistics  정량치 계산에 사용할 정적 텐서 목록, 개별 미니배치 데이터에 독립적이며 실행 중 변하지 않는 일정한 내용
				/// @param 	kwArgs  	손실 함수값 계산에 사용할 서브 수식 목록들(download 외의 임의의 이름)과 다운로드 항목 리스트(download)
				///
				/// @returns	생성된 손실 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Loss CustomLoss(VDict lossTerms, TensorDict statistics, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 한 가지 정량치를 계산할 Metric 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	sName   	생성할 Metric 구조의 이름
				/// @param 	sFormula	생성할 Metric 구조가 게산할 내용을 지정하는 수식
				/// @param 	kwArgs  	Metric 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 Metric 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Metric FormulaMetric(string sName, string sFormula, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 복수의 정량치를 계산할 Metric 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	sName   	생성할 Metric 구조의 이름
				/// @param 	metrics		각각의 정량치를 계산할 자식 객체
				/// @param 	kwArgs  	Metric 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 Metric 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Metric MultipleMetric(MetricDict metrics, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 사용자 정의 수식을 이용해 복수의 정량치를 계산할 Metric 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	expTerms    정량치 명칭과 게산 수식으로 구성된 목록 정보
				/// @param 	statistics  정량치 계산에 사용할 정적 텐서 목록, 개별 미니배치 데이터에 독립적이며 실행 중 변하지 않는 일정한 내용
				/// @param 	kwArgs  	정량치 계산에 사용할 서브 수식 목록들(download 외의 임의의 이름)과 다운로드 항목 리스트(download)
				///
				/// @returns	생성된 Metric 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Metric CustomMetric(VDict expTerms, TensorDict statistics, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 최적화 알고리즘을 지원할 옵티마이저 구조를 생성하고 객체를 반환합니다.
				/// 최적화 알고리즘 종류는 옵션에 지정된 "optimizer" 항목의 값에 따라 선택됩니다.
				///
				/// @param 	params  	최적화 대상이 되는 파라미터들을 갖는 파라미터군 객체
				/// @param 	kwArgs  	옵티마이저 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 옵티마이저 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Optimizer createOptimizer(string name, Parameters params, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 SGD 최적화 알고리즘을 이용하는 옵티마이저 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	params  	최적화 대상이 되는 파라미터들을 갖는 파라미터군 객체
				/// @param 	kwArgs  	옵티마이저 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 옵티마이저 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Optimizer SGDOptimizer(Parameters params, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 Adam 최적화 알고리즘을 이용하는 옵티마이저 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	params  	최적화 대상이 되는 파라미터들을 갖는 파라미터군 객체
				/// @param 	kwArgs  	옵티마이저 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 옵티마이저 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Optimizer AdamOptimizer(Parameters params, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 Nesterov 최적화 알고리즘을 이용하는 옵티마이저 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	params  	최적화 대상이 되는 파라미터들을 갖는 파라미터군 객체
				/// @param 	kwArgs  	옵티마이저 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 옵티마이저 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Optimizer NesterovOptimizer(Parameters params, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 Momentum 최적화 알고리즘을 이용하는 옵티마이저 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	params  	최적화 대상이 되는 파라미터들을 갖는 파라미터군 객체
				/// @param 	kwArgs  	옵티마이저 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 옵티마이저 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Optimizer MomentumOptimizer(Parameters params, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 AdaGrad 최적화 알고리즘을 이용하는 옵티마이저 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	params  	최적화 대상이 되는 파라미터들을 갖는 파라미터군 객체
				/// @param 	kwArgs  	옵티마이저 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 옵티마이저 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Optimizer AdaGradOptimizer(Parameters params, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 RMSProp 최적화 알고리즘을 이용하는 옵티마이저 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	params  	최적화 대상이 되는 파라미터들을 갖는 파라미터군 객체
				/// @param 	kwArgs  	옵티마이저 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 옵티마이저 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Optimizer RMSPropOptimizer(Parameters params, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 텐서 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	shape	생성할 텐서의 형상
				/// @param 	type 	생성할 텐서의 데이터 타입
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor createTensor(VShape shape, VDataType type);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 텐서 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	shape	생성할 텐서의 형상
				/// @param 	type 	생성할 텐서의 데이터 타입
				/// @param 	device	생성할 텐서의 디바이스
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor createTensor(VShape shape, VDataType type, int device);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 텐서 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	shape		생성할 텐서의 형상
				/// @param 	type 		생성할 텐서의 데이터 타입
				/// @param 	intMethod	추기화 방법 (zeros, ones)
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor createTensor(VShape shape, VDataType type, string intMethod);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 초기값이 부여된 텐서 구조를 생성하고 객체를 반환합니다.
				/// 이 때 초기값은 리스트 구조로 전해진 인자값을 원소 순서대로 배정하여 설정합니다.
				///
				/// @param 	shape	생성할 텐서의 형상
				/// @param 	type 	생성할 텐서의 데이터 타입
				/// @param 	values	생성할 텐서의 초기값
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor createTensor(VShape shape, VDataType type, VList values);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 초기값이 부여된 텐서 구조를 생성하고 객체를 반환합니다.
				/// 이 때 초기값은 pData로 주어진 메모리 블록의 내용을 일괄 복사하여 설정합니다.
				///
				/// @param 	shape	생성할 텐서의 형상
				/// @param 	type 	생성할 텐서의 데이터 타입
				/// @param 	pData	생성할 텐서에 부여할 초기값을 가진 메모리 블록 주소
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor createTensor(VShape shape, VDataType type, void* pData);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 1 값이 초기값이 부여된 32비트 실수형 텐서 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	shape	생성할 텐서의 형상
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor ones(VShape shape);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 0 값이 초기값이 부여된 32비트 실수형 텐서 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	shape	생성할 텐서의 형상
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor zeros(VShape shape);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 균일 분포에 따라 발생된 난수 초기값들이 부여된 32비트 실수형 텐서 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	shape	생성할 텐서의 형상
				/// @param 	min  	난수값 발생 범위의 하한값
				/// @param 	max  	난수값 발생 범위의 상한값
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor rand_uniform(VShape shape, float min, float max);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 정규 분포에 따라 발생된 난수 초기값들이 부여된 32비트 실수형 텐서 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	shape	생성할 텐서의 형상
				/// @param 	avg  	난수값 발생용 정규분포의 평균 값
				/// @param 	avg  	난수값 발생용 정규분포의 표준편차 값
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor rand_normal(VShape shape, float avg, float std);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 임의의 원핫 벡터들로 32비트 실수형 텐서 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	shape	생성할 텐서의 형상
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor rand_onehot(VShape shape);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 크기 size의 1차원 텐서 구조를 생성하고 객체를 반환합니다.
				/// 텐서 원소들은 0에서 0,1, ..., size-1 사이의 순차적인 값으로 초기화됩니다.
				///
				/// @param 	size	생성할 텐서의 크기
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor arange(int64 size);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 크기 (to - from)의 1차원 텐서 구조를 생성하고 객체를 반환합니다.
				/// 텐서 원소들은 from, from+1, ..., to-1 사이의 순차적인 값으로 초기화됩니다.
				///
				/// @param 	size	생성할 텐서의 크기
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor arange(int64 from, int64 to);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 순차적인 값을 갖는 1차원 텐서 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	arg1  	순차 나열될 값들의 시작 값을 지정하며 정수형 및 실수형 값 모두 가능
				/// @param 	arg2  	순차 나열될 값들의 종료 값을 지정하며 정수형 및 실수형 값 모두 가능
				/// @param 	arg3  	순차 나열될 값들의 간격 값을 지정하며 정수형 및 실수형 값 모두 가능
				/// @param 	kwArgs	샹성될 텐서의 데이터 타입능 "type" 속성으로 지정 가능
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor arange(VValue arg1, VValue arg2, VValue arg3, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 순차적인 값을 갖는 1차원 텐서 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	from  	순차 나열될 값들의 시작 값
				/// @param 	to  	순차 나열될 값들의 종료 값
				/// @param 	count  	순차 나열될 값들의 갯수
				/// @param 	kwArgs	샹성될 텐서의 데이터 타입능 "type" 속성으로 지정 가능
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor linspace(float from, float to, int count, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진에 Function 구조를 생성하고 객체를 반환합니다.
				///
				/// @param 	sBuiltin  	생성할 Function 객체의 유형
				/// @param 	sName	  	생성할 Function 객체의 이름
				/// @param 	kwArgs  	Function 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 Function 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Function createFunction(string sBuiltin, string sName, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 에코 시스템에 모델 베이스 접근을 지원할 Account 구조를 생성하고 객체를 반환합니다.
				///
				/// @returns	생성된 Account 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Account open_account();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 에코 시스템에 오디오 파일 접근 기능을 지원할 AudioFileReader 구조를 생성하고 객체를 반환합니다.
				/// 이 객체 클래스는 오디오 관련 응용의 개발을 돕기 위한 서비스 기능으로 만들어졌습니다만 아직은 기능이 많이 제한된 상태입니다.
				/// 추후 다양한 활용이 가능하도록 기능을 강화해 갈 예정입니다.
				///
				/// @param 	args	AudioFileReader 구조 생성에 사용할 각종 옵션 정보
				///
				/// @returns	생성된 AudioFileReader 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API AudioSpectrumReader createAudioSpectrumReader(VDict args);
			};

			class Module : public Object {
			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Module 클래스의 공백 생성자입니다.
				/// 코어 객체 내용이 비어있는 텐서 객체를 생성하고 객체를 반환합니다.
				/// 비어있는 객체 생성자는 Module 틀래스 객체를 멤버로 갖는 새로운 클래스를 만들 때 필요합니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Module 클래스의 코어 전달 생성자입니다.
				/// Module 클래스 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 이 생성자는 다른 캡슐 객체의 getCore() 메소드나 getClone() 메소드로 추출된 코어 객체 포인터를 이용해 새로운 캡슐 객체를 생성합니다.
				/// 이 때 코어 객체의 참조계수가 1 증가하며 증가된 값은 캡슐 객체가 파괴될 때 감소합니다.
				/// Module 클래스 객체들은 NN 클래스 메소드를 통해 생성되며 공백 생성자 외에 새로운 객체를 직접 생성하는 별도의 생성자는 존재하지 않습니다.
				///
				/// @param core	생성되는 클래스 객체가 내부에 가져야 할 코어 객체의 포인터입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module(void* core);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Module 클래스의 복사생성자입니다.
				///
				/// @param 	a	복사할 원본 객체 참조 변수입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module(const Module& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Module 클래스의 치환 연산자입니다.
				///
				/// @param 	a	치환에 이용할 원본 객체 참조 변수입니다.
				///
				/// @returns	연속된 치환이 가능하도록 치환된 객체의 참조 주소를 반환합니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module& operator=(const Module& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Module 클래스 객체를 파괴합니다.
				/// Module 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 캡슐 객체의 파괴는 코어 객체의 참조계수를 감소시키며 참조계수가 0이 될 때에만 실제 코어 객체가 파괴됩니다.
				///
				/// @returns	파괴자는 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API ~Module();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Module 클래스 객체에 연결된 엔진 객체의 고유번호를 반환합니다.
				/// 디버깅 등의 목적에 사용 가능합니다.
				///
				/// @returns	엔진에서의 객체 고유번호, 해당 객체가 없으면 -1
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int get_engine_id();

			public:
				enum class ModuleType { layer, network, model, macro, custom };

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체가 생성되어 소속된 NN 클래스 객체를 반환합니다.
				///
				/// @returns	NN 클래스 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API NN get_nn();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체의 딥러닝 프레임워크 엔진 안에서의 식별명을 반환합니다.
				///
				/// @returns	모듈 객체의 이름
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API string get_name() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체의 데이터 타입을 반환합니다.
				///
				/// @returns	모듈 객체의 데이터 타입
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API ModuleType get_type() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체를 루트로 하는 모델 구조를 특정 입력 형상에 맞추어 전개한 내용의 새로운 모듈 객체를 만들어 반환합니다.
				/// 모델 구조 안에 포함된 매크로 레이어들도 이 과정에서 매크로 확장 처리를 통해 실제 처리 가능한 레이어들로 대치됩니다.
				///
				/// @param 	shape 	새로 만들어질 객체가 처리할 입력 형상
				/// @param 	kwArgs	모듈 객체 생성에 사용될 보조 정보
				///
				/// @returns	새로 만들어진 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module expand(VShape shape, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체를 루트로 하는 모델 구조를 지정된 디바이스 처리용 구조로 재구성해 새로운 모듈 객체를 만들어 반환합니다.
				/// 단 지정된 디바이스가 기존 디바이스와 일치하면 기존 객체가 반환됩니다.
				///
				/// @param 	device 	새로 만들어질 객체 처리에 배정할 디바이스 이름, "cpu", "cuda:0", "cuda" 등이 가능
				/// @param 	kwArgs	모듈 객체 생성에 사용될 보조 정보
				///
				/// @returns	새로 만들어진 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module to(string device);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// expand() 메소드 처리를 통해 확정된 모듈 객체의 입력 데이터 형상을 반환합니다.
				/// expand() 메소드 처리의 대상이 된 모듈은 물론 그 모듈을 루트로 하는 모델 내의 후손 객체들에 대해서도 호출 가능합니다.
				///
				/// @returns	모듈 객체의 입력 데이터 형상
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VShape get_xshape() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// expand() 메소드 처리를 통해 확정된 모듈 객체의 출력 데이터 형상을 반환합니다.
				/// expand() 메소드 처리의 대상이 된 모듈은 물론 그 모듈을 루트로 하는 모델 내의 후손 객체들에 대해서도 호출 가능합니다.
				///
				/// @returns	모듈 객체의 출력 데이터 형상
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VShape get_yshape() const;

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체를 루트로 하는 모델의 구조를 표현하는 문자열을 반환합니다.
				/// 모델을 구성하는 모듈들의 구성 체계, 각 레이어의 명칭과 종류, 설정 옵션, 파라미터 수 등을 확인할 수 있습니다.
				/// expand() 처리 후 호출하면 형상의 변화 과정도 함께 보여줍니다.
				///
				/// @returns	모듈 객체로 시작되는 모델 구조 표현 문자열
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API string __str__() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체 자체의 여러 내용을 반환합니다.
				/// child_count(), nth_child() 메소드를 이용해 모델 구성 형태를 따라가며 이 메소드를 호출하면
				/// __str__() 메소드에서 반환하는 내용을 용도에 맞게 재구성하여 사용하거나 출력할 수 있습니다.
				///
				/// @param 	p_name 		이름 문자열을 받아올 변수의 주소, NULL이면 무시
				/// @param 	p_builtin 	레이어 유형 문자열을 받아올 변수의 주소, NULL이면 무시
				/// @param 	p_option 	레이어 설정 정보를 받아올 변수의 주소, NULL이면 무시
				/// @param 	p_in_shape 	입력 형상을 받아올 변수의 주소, NULL이면 무시
				/// @param 	p_out_shape 출력 형상을 받아올 변수의 주소, NULL이면 무시
				/// @param 	p_pmsize 	파라미터 ro수를 받아올 변수의 주소, NULL이면 무시
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void desc(string* p_name, string* p_builtin, VDict* p_option, VShape* p_in_shape, VShape* p_out_shape, int64* p_pmsize) const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체를 루트로 하는 모델의 처리 방식을 추론 등에 필요한 순전파 전용 모드로 설정합니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void eval();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체를 루트로 하는 모델의 처리 방식을 학습에 필요한 순전파/역전파 지원 모드로 설정합니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void train();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 단일 텐서를 입력으로 하여 모듈 객체를 루트로 하는 모델의 순전파 처리 과정을 호출합니다.
				///
				/// @param 	x	순전파 처리에 이용할 입력 텐서
				///
				/// @returns	신경망 처리  결과로 생성된 출력 텐서
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor __call__(Tensor x);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 목록을 입력으로 하여 모듈 객체를 루트로 하는 모델의 순전파 처리 과정을 호출합니다.
				///
				/// @param 	xs	순전파 처리에 이용할 입력 텐서 목록
				///
				/// @returns	신경망 처리  결과로 생성된 출력 텐서 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API TensorDict __call__(TensorDict xs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 단일 텐서를 입력으로 하여 모듈 객체를 루트로 하는 모델의 순전파 처리 과정을 호출합니다.
				/// 이 때 eval(), no_grad() 설정 등을 내부에서 자동으로 처리하기 때문에 추론 전용 으로 손쉬운 호출이 가능해집니다.
				///
				/// @param 	x	순전파 처리에 이용할 입력 텐서
				///
				/// @returns	신경망 처리  결과로 생성된 출력 텐서
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor predict(Tensor x);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 목록을 입력으로 하여 모듈 객체를 루트로 하는 모델의 순전파 처리 과정을 호출합니다.
				/// 이 때 eval(), no_grad() 설정 등을 내부에서 자동으로 처리하기 때문에 추론 전용 으로 손쉬운 호출이 가능해집니다.
				///
				/// @param 	xs	순전파 처리에 이용할 입력 텐서 목록
				///
				/// @returns	신경망 처리  결과로 생성된 출력 텐서
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API TensorDict predict(TensorDict x);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체에 자식 노드를 추가합니다. 모듈 객체는 복합 레이어 유형이어야 하며 추가되는 위치는 마지막 자식 자리입니다.
				/// 이 때 모듈 객체와 추가되는 모듈은 기존의 조상-후손 관계가 없어야 합니다.
				///
				/// @param 	child	추가할 자식 모듈
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void append_child(Module child);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체를 루트로 하는 모델 전체에 포함된 파라미터들을 모아 관리하는 파라미터군 객체를 만들어 반환합니다.
				///
				/// @returns	파라미터군 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Parameters parameters();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체를 복제한 새로운 모듈 객체를 만들어 반환합니다. 
				/// 이 때 모듈 객체를 루트로 하는 모델 전체가 복제됩니다.
				///
				/// @returns	복제되어 만들어진 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module create_clone();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체의 자식 모듈 개수를 반환합니다.
				///
				/// @returns	자식 모듈 개수
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int child_count() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체의 지정된 순번의 자식 모듈을 반환합니다.
				///
				/// @param 	nth	자식 노드의 군번
				///
				/// @returns	해당 순번의 자식 노드 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module nth_child(int nth) const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 객체의 자식 모듈 중 지정된 이름의 모듈 객체를 찾아줍니다.
				///
				/// @param 	name	찾을 자식 객체의 이름
				///
				/// @returns	찾아진 자식 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module fetch_child(string name) const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 서버에서 부여된 식별명을 이용해 모듈 객체의 후손 모듈 중 지정된 이름의 객체를 찾아 반환합니다.
				///
				/// @param 	name	찾을 후손 객체의 이름
				///
				/// @returns	찾아진 후손 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module seek_layer(string name) const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체를 루트로 하는 모델 전체의 파라미터들을 최초 생성시와 같은 방법으로 초기화합니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void init_parameters();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체를 루트로 하는 모델 전체의 파라미터들을 darknet 형식으로 저장된 내용에 따라 초기화합니다.
				///
				/// @param 	cfg_path	 적재하는 파라미터의 구성을 점검하기 위해 사용될 다크넷 처리 과정의 구성 정보 파일의 경로입니다.
				/// @param 	weight_path  실제 적재할 파라미터의 내용이 저장된 파라미터 파일의 경로입니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void load_cfg_config(string cfg_path, string weight_path);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체를 루트로 하는 모델 전체의 구성과 파라미터 내용을 지정된 경로의 파일에 저장합니다.
				///
				/// @param 	filePath	파일 저장 경로로서 상대경로 지정시에는 시스템 설정에 지정된 경로 하단에 저장합니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void save(string filePath) const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체를 루트로 하는 모델 전체의 구성과 파라미터 내용을 지정된 경로의 파일에 저장합니다.
				///
				/// @param 	root		저장할 파일 경로의 상단 부분
				/// @param 	filePath	저장할 파일 경로의 하단 부분
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void save(string root, string filePath) const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모델 객체의 순전파 처리에 제공할 미니배치 데이터들의 데이터 번호를 엔진에 알려줍니다.
				/// 알려준 내용은 콜백 호출시 인자로 전달되어 콜백 함수가 데이터 관련 처리를 수행할 수 있게 해 줍니다.
				/// 따라서콜백 호출 시 활용이 가능하도록 이 메소드는 순전파 개시 전에 호출되어야 합니다.
				///
				/// @param 	dataIdx	데이터 번호 목록
				/// 				
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void upload_data_index(VList dataIdx);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체를 루트로 하는 모델의 파라미터 내용을 지정된 텐서내용으로 변경합니다.
				///
				/// @param 	paramTensors	변경될 파라미터 값을 갖는 텐서 목록
				/// @param 	mode			파라미터 변경 방식을 지정할 모드 값
				/// 						
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void set_paramater(TensorDict paramTensors, string mode);
			};

			class Loss : public Object {
			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Loss 클래스의 공백 생성자입니다.
				/// 코어 객체 내용이 비어있는 텐서 객체를 생성하고 객체를 반환합니다.
				/// 비어있는 객체 생성자는 Loss 틀래스 객체를 멤버로 갖는 새로운 클래스를 만들 때 필요합니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Loss();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Loss 클래스의 코어 전달 생성자입니다.
				/// Loss 클래스 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 이 생성자는 다른 캡슐 객체의 getCore() 메소드나 getClone() 메소드로 추출된 코어 객체 포인터를 이용해 새로운 캡슐 객체를 생성합니다.
				/// 이 때 코어 객체의 참조계수가 1 증가하며 증가된 값은 캡슐 객체가 파괴될 때 감소합니다.
				/// Loss 클래스 객체들은 NN 클래스 메소드를 통해 생성되며 공백 생성자 외에 새로운 객체를 직접 생성하는 별도의 생성자는 존재하지 않습니다.
				///
				/// @param core	생성되는 클래스 객체가 내부에 가져야 할 코어 객체의 포인터입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Loss(void* core);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Loss 클래스의 복사생성자입니다.
				///
				/// @param 	a	복사할 원본 객체 참조 변수입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Loss(const Loss& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Loss 클래스의 치환 연산자입니다.
				///
				/// @param 	a	치환에 이용할 원본 객체 참조 변수입니다.
				///
				/// @returns	연속된 치환이 가능하도록 치환된 객체의 참조 주소를 반환합니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Loss& operator=(const Loss& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Loss 클래스 객체를 파괴합니다.
				/// Loss 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 캡슐 객체의 파괴는 코어 객체의 참조계수를 감소시키며 참조계수가 0이 될 때에만 실제 코어 객체가 파괴됩니다.
				///
				/// @returns	파괴자는 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API ~Loss();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Loss 클래스 객체에 연결된 엔진 객체의 고유번호를 반환합니다.
				/// 디버깅 등의 목적에 사용 가능합니다.
				///
				/// @returns	엔진에서의 객체 고유번호, 해당 객체가 없으면 -1
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int get_engine_id();

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 단일 텐서 쌍을 입력으로 하여 손실함수 계산을 위한 Loss 객체의 순전파 처리 과정을 호출합니다.
				///
				/// @param 	pred			손실함수 계산에 이용할 추정치 입력 텐서, 보통 모델 신경망 출력을 이용
				/// @param 	y				손실함수 계산에 이용할 정답치 입력 텐서, 보통 데이터 로더에서 획득
				/// @param 	download_all	정확도 값과 함께 계산에 이용된 보조 항목까지 결과로서 다운로드 받을지 여부를 지정
				///
				/// @returns	손실함수 값을 단일 성분으로 갖는 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor __call__(Tensor pred, Tensor y, bool download_all);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 목록 쌍을 입력으로 하여 손실함수 계산을 위한 Loss 객체의 순전파 처리 과정을 호출합니다.
				///
				/// @param 	preds			손실함수 계산에 이용할 추정치 입력 텐서 목록, 보통 모델 신경망 출력을 이용
				/// @param 	ys				손실함수 계산에 이용할 정답치 입력 텐서 목록, 보통 데이터 로더에서 획득
				/// @param 	download_all	손실함수 값과 함께 게산에 이용된 보조 항목까지 결과로서 다운로드 받을지 여부를 지정
				///
				/// @returns	손실함수 값 (및 보조항목 값)을 단일 성분으로 갖는 텐서 객체들의 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API TensorDict __call__(TensorDict preds, TensorDict ys, bool download_all);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 목록 쌍을 입력으로 하여 손실함수 계산을 위한 Loss 객체의 순전파 처리 과정을 호출합니다.
				/// 기본적으로 __call__() 메소드와 같은 기능을 수행하지만 virrual 함수이기 때문에 파생클래스 선언에 의한 오버라이딩이 가능하다.
				///
				/// @param 	preds			손실함수 계산에 이용할 추정치 입력 텐서 목록, 보통 모델 신경망 출력을 이용
				/// @param 	ys				손실함수 계산에 이용할 정답치 입력 텐서 목록, 보통 데이터 로더에서 획득
				/// @param 	download_all	손실함수 값과 함께 게산에 이용된 보조 항목까지 결과로서 다운로드 받을지 여부를 지정
				///
				/// @returns	손실함수 값 (및 보조항목 값)을 단일 성분으로 갖는 텐서 객체들의 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API virtual TensorDict evaluate(TensorDict preds, TensorDict ys, bool download_all);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 단일 텐서 쌍을 입력으로 하여 정확도 계산을 위한 Loss 객체의 처리 과정을 호출합니다.
				///
				/// @param 	pred			정확도 계산에 이용할 추정치 입력 텐서, 보통 모델 신경망 출력을 이용
				/// @param 	y				정확도 계산에 이용할 정답치 입력 텐서, 보통 데이터 로더에서 획득
				/// @param 	download_all	정확도 값과 함께 계산에 이용된 보조 항목까지 결과로서 다운로드 받을지 여부를 지정
				///
				/// @returns	정확도 값 (및 보조항목 값)을 단일 성분으로 갖는 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor eval_accuracy(Tensor pred, Tensor y, bool download_all);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 목록 쌍을 입력으로 하여 정확도 계산을 위한 Loss 객체의 처리 과정을 호출합니다.
				///
				/// @param 	preds			정확도 계산에 이용할 추정치 입력 텐서 목록, 보통 모델 신경망 출력을 이용
				/// @param 	ys				정확도 계산에 이용할 정답치 입력 텐서 목록, 보통 데이터 로더에서 획득
				/// @param 	download_all	정확도 값과 함께 계산에 이용된 보조 항목까지 결과로서 다운로드 받을지 여부를 지정
				///
				/// @returns	정확도 값 (및 보조항목 값)을 단일 성분으로 갖는 텐서 객체들의 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API TensorDict eval_accuracy(TensorDict preds, TensorDict ys, bool download_all);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 최근 수행된 손실함수 계산 과정을 역추적해 역전파 처리를 수행합니다.
				/// 손실 객체에 의하여 시작된 역전파는 신경망 모델의 처리 과정까지 모두 추적합니다.
				/// 따라서 이 메소드의 호출만으로 대개의 모델에서 역전파 전체가 단숨에 처리되게 됩니다.
				/// 수행된 내용을 바탕으로 처리하기 때문에 아무런 입력도 필요 없습니다.
				/// 또한 출력도 별로로 제공하지 않으며 단지 신경망 모델 내의 파라미터들에 대해 기울기 정보를 생성해 내부적으로 전달해 줍니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void backward();
			};

			class Optimizer : public Object {
			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Optimizer 클래스의 공백 생성자입니다.
				/// 코어 객체 내용이 비어있는 텐서 객체를 생성하고 객체를 반환합니다.
				/// 비어있는 객체 생성자는 Optimizer 틀래스 객체를 멤버로 갖는 새로운 클래스를 만들 때 필요합니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Optimizer();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Optimizer 클래스의 코어 전달 생성자입니다.
				/// Optimizer 클래스 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 이 생성자는 다른 캡슐 객체의 getCore() 메소드나 getClone() 메소드로 추출된 코어 객체 포인터를 이용해 새로운 캡슐 객체를 생성합니다.
				/// 이 때 코어 객체의 참조계수가 1 증가하며 증가된 값은 캡슐 객체가 파괴될 때 감소합니다.
				/// Optimizer 클래스 객체들은 NN 클래스 메소드를 통해 생성되며 공백 생성자 외에  새로운 객체를 직접 생성하는 별도의 생성자는 존재하지 않습니다.
				///
				/// @param core	생성되는 클래스 객체가 내부에 가져야 할 코어 객체의 포인터입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Optimizer(void* core);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Optimizer 클래스의 복사생성자입니다.
				///
				/// @param 	a	복사할 원본 객체 참조 변수입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Optimizer(const Optimizer& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Optimizer 클래스의 치환 연산자입니다.
				///
				/// @param 	a	치환에 이용할 원본 객체 참조 변수입니다.
				///
				/// @returns	연속된 치환이 가능하도록 치환된 객체의 참조 주소를 반환합니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Optimizer& operator=(const Optimizer& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Optimizer 클래스 객체를 파괴합니다.
				/// Optimizer 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 캡슐 객체의 파괴는 코어 객체의 참조계수를 감소시키며 참조계수가 0이 될 때에만 실제 코어 객체가 파괴됩니다.
				///
				/// @returns	파괴자는 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API ~Optimizer();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Optimizer 클래스 객체에 연결된 엔진 객체의 고유번호를 반환합니다.
				/// 디버깅 등의 목적에 사용 가능합니다.
				///
				/// @returns	엔진에서의 객체 고유번호, 해당 객체가 없으면 -1
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int get_engine_id();

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 옵티마이저 객체의 설정 정보를 지정합니다. 생성 시 지정한 학습률 등의 옵션 정보를 변경하려고 할 때 사용할 수 있습니다.
				///
				/// @param 	kwArgs	수정하여 설정할 옵션 정보
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void set_option(VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 옵티마이저 객체가 관할하는 파라미터들에 대한 기울기 정보를 모두 0으로 초기화합니다.
				/// 보통 역전파 처리를 시작하기 직전에 호출합니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void zero_grad();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 옵티마이저 객체가 관할하는 파라미터들에 대해 역전파 과정에 구해진 기울기 정보를 반영해 반영합니다.
				/// 구체적인 기울기 정보 반영 방법은 객체에 배정된 최적화 알고리즘에 따라 달라집니다.
				/// 옵티마이저 설정 정보르 지정합니다. 생성 시 지정한 학습률 등의 옵션 정보를 변경하려고 할 때 사용할 수 있습니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void step();
			};

			class Parameters : public Object {
			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Parameters 클래스의 공백 생성자입니다.
				/// 코어 객체 내용이 비어있는 텐서 객체를 생성하고 객체를 반환합니다.
				/// 비어있는 객체 생성자는 Parameters 틀래스 객체를 멤버로 갖는 새로운 클래스를 만들 때 필요합니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Parameters();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Parameters 클래스의 코어 전달 생성자입니다.
				/// Parameters 클래스 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 이 생성자는 다른 캡슐 객체의 getCore() 메소드나 getClone() 메소드로 추출된 코어 객체 포인터를 이용해 새로운 캡슐 객체를 생성합니다.
				/// 이 때 코어 객체의 참조계수가 1 증가하며 증가된 값은 캡슐 객체가 파괴될 때 감소합니다.
				/// Parameters 클래스 객체들은 Module 클래스 메소드를 통해 생성되며 공백생성자 외에 새로운 객체를 직접 생성하는 별도의 생성자는 존재하지 않습니다.
				///
				/// @param core	생성되는 클래스 객체가 내부에 가져야 할 코어 객체의 포인터입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Parameters(void* core);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Parameters 클래스의 복사생성자입니다.
				///
				/// @param 	a	복사할 원본 객체 참조 변수입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Parameters(const Parameters& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Parameters 클래스의 치환 연산자입니다.
				///
				/// @param 	a	치환에 이용할 원본 객체 참조 변수입니다.
				///
				/// @returns	연속된 치환이 가능하도록 치환된 객체의 참조 주소를 반환합니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Parameters& operator=(const Parameters& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Parameters 클래스 객체를 파괴합니다.
				/// Parameters 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 캡슐 객체의 파괴는 코어 객체의 참조계수를 감소시키며 참조계수가 0이 될 때에만 실제 코어 객체가 파괴됩니다.
				///
				/// @returns	파괴자는 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API ~Parameters();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Parameters 클래스 객체에 연결된 엔진 객체의 고유번호를 반환합니다.
				/// 디버깅 등의 목적에 사용 가능합니다.
				///
				/// @returns	엔진에서의 객체 고유번호, 해당 객체가 없으면 -1
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int get_engine_id();

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Parameters 객체가 관할하는 모든 파라미터들에 대해 대응되는 기울기 정보를 0으로 초기화합니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void zero_grad();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Parameters 객체가 관할하는 모든 파라미터들을 최초 생성시와 같은 방법으로 초기화합니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void initWeights();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Parameters 객체가 관할하는 모든 파라미터들을 파라미터 정보 목록과 함께 사용 순서에 따른 리스를 반환합니다.
				///
				/// @param tensors	파라미터 텐서 목록
				///
				/// @returns	순전파 처리 순서에 따른 파라미터 사용 정보 리스트
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VList weightList(TensorDict& tensors);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Parameters 객체가 관할하는 모든 파라미터에 대해 대응되는 기울기 정보 목록과 함께 사용 순서에 따른 리스를 반환합니다.
				///
				/// @param tensors	기울기 텐서 목록
				///
				/// @returns	순전파 처리 순서에 따른 기울기 사용 정보 리스트
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VList gradientList(TensorDict& tensors);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Parameters 객체가 관할하는 모든 파라미터들을 텐서 목록 형태로 구성하여 반환합니다.
				///
				/// @returns	파라미터 텐서 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API TensorDict weightDict();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Parameters 객체가 관할하는 모든 파라미터에 대해 대응되는 기울기 정보들을 텐서 목록 형태로 구성하여 반환합니다.
				///
				/// @returns	기울기 텐서 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API TensorDict gradientDict();
			};

			class Tensor : public Object {
			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Tensor 클래스의 공백 생성자입니다.
				/// 코어 객체 내용이 비어있는 텐서 객체를 생성하고 객체를 반환합니다.
				/// 비어있는 객체 생성자는 Tensor 틀래스 객체를 멤버로 갖는 새로운 클래스를 만들 때 필요합니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Tensor 클래스의 코어 전달 생성자입니다.
				/// Tensor 클래스 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 이 생성자는 다른 캡슐 객체의 getCore() 메소드나 getClone() 메소드로 추출된 코어 객체 포인터를 이용해 새로운 캡슐 객체를 생성합니다.
				/// 이 때 코어 객체의 참조계수가 1 증가하며 증가된 값은 캡슐 객체가 파괴될 때 감소합니다.
				/// Tensor 클래스 객체들은 NN 클래스 메소드를 통해 생성되며 공백 생성자 외에 새로운 객체를 직접 생성하는 별도의 생성자는 존재하지 않습니다.
				///
				/// @param core	생성되는 클래스 객체가 내부에 가져야 할 코어 객체의 포인터입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor(void* core);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Tensor 클래스의 복사생성자입니다.
				///
				/// @param 	a	복사할 원본 객체 참조 변수입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor(const Tensor& a);
				
				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Tensor 클래스의 치환 연산자입니다.
				///
				/// @param 	a	치환에 이용할 원본 객체 참조 변수입니다.
				///
				/// @returns	연속된 치환이 가능하도록 치환된 객체의 참조 주소를 반환합니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor& operator=(const Tensor& a);
				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Tensor 클래스 객체를 파괴합니다.
				/// Tensor 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 캡슐 객체의 파괴는 코어 객체의 참조계수를 감소시키며 참조계수가 0이 될 때에만 실제 코어 객체가 파괴됩니다.
				///
				/// @returns	파괴자는 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API ~Tensor();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Tensor 클래스 객체에 연결된 엔진 객체의 고유번호를 반환합니다.
				/// 디버깅 등의 목적에 사용 가능합니다.
				///
				/// @returns	엔진에서의 객체 고유번호, 해당 객체가 없으면 -1
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int get_engine_id();

			public:
				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 크기 1인 텐서인 경우에 한하여 원소 값을 32비트 정수형 값으로 형변환하여 반환합니다.
				///
				/// @returns	유일한 원소의 32비트 정수형 값
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API operator int() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 크기 1인 텐서인 경우에 한하여 원소 값을 64비트 정수형 값으로 형변환하여 반환합니다.
				///
				/// @returns	유일한 원소의 64비트 정수형 값
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API operator int64() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 크기 1인 텐서인 경우에 한하여 원소 값을 32비트 실수형 값으로 형변환하여 반환합니다.
				///
				/// @returns	유일한 원소의 32비트 실수형 값
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API operator float() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 형상에서 첫번 째 축의 크기를 반환합니다.
				///
				/// @returns	텐서 형상에서 첫번 째 축의 크기
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int64 len() const;
				ECO_API int64 size() const;
				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 내용을 저장할 디바이스 번호를 알려줍니다. CPU의 경우 -1, 0 이상은 GPU 디바이스 번호입니다.
				///
				/// @returns	텐서 저장 공간의 디바이스 번호
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int device() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 내용의 물리적 크기를 바이트 단위로 나타낸 값을 반환합니다.
				///
				/// @returns	텐서 내용의 바이트 단위 물리적 크기
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int64 byte_size() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서의 형상을 반환합니다.
				///
				/// @returns	텐서의 형상
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VShape shape() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서의 데이터 타입을 반환합니다.
				///
				/// @returns	텐서의 데이터 타입
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VDataType type() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서의 데이터 타입을 문자열 이름 형태로 반환합니다.
				///
				/// @returns	텐서의 데이터 타입 이름
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API string type_desc() const;

				ECO_API static VDataType name_to_type(string type_name);
				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 구성을 새로운 디바이스 번호에 맞추어 변경한 새로운 텐서 구조를 구성한 후 객체 형태로 반환합니다.
				///
				/// @param 	device	새로운 텐서에 배정할 디바이스 번호The device.
				///
				/// @returns	생성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor to_device(int device);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서가 데이터를 갖지 않는 껍질 뿐인 텐서인지 여부를 알려줍니다.
				///
				/// @returns	데이터 없는 텐서인지 여부
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API bool has_no_data();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 지정된 형상과 데이터 타입에 따라 텐서에 데이터를 저장할 메모리 블록을 배정합니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void alloc_data();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 에코 시스템에 만들어진 텐서를 딥러닝 프레임워크 엔진으로 업로드합니다.
				/// 프레임워크 엔진에 대응되는 텐서 객체가 없는 경우 새로운 텐서 객체가 만들어져 연결되며
				/// 텐서 데이터 내용도 업로드됩니다.
				/// 에코 시스템에서 만들어지고 계산된 텐서 내용은 꼭 필요한 경우 외에는 엔진에 전달되지 않습니다.
				/// 따라서 텐서 내용을 준비해 엔진의 연산에 전달하고 싶을 때 이 메소드를 호출하게 됩니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void upload();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 딥러닝 프레임워크 엔진으로부터 텐서 객체로 텐서 데이터를 내려 받습니다.
				/// 프레임워크 엔진에서 계산된 텐서 내용은 꼭 필요한 경우 외에는 에코 시스템에 전달되지 않습니다.
				/// 따라서 엔진의 연산에 이용되는 텐서의 내용을 확인하고 싶을 때 이 메소드를 호출하게 됩니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void download_data();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// pData 인자가 가리키는 메모리 블록의 내용을 복사해 텐서 데이터로 저장합니다.
				///
				/// @param shape	형상 일치 확인을 위한 형상 정보
				/// @param type 	데이터 타입 일치 확인을 위한 데이터 타입 정보
				/// @param pData	복사할 내용이 담긴 메모리 블록 시작 주소
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void copy_data(VShape shape, VDataType type, void* pData);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 크기 1인 32비트 실수형 타입의 텐서인 경우에 한하여 원소 값을 전달해 스칼라 구조를 만들고 객체로 반환합니다.
				///
				/// @returns	생성된 스칼라 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Scalar item() const;

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서에 저장된 순전파 처리 과정을 역추적해 역전파 처리를 수행합니다.
				/// 이 메소드는 반드시 손실 객체에 의해 계산된 손실값을 담고 있는 텐서에 대해 호출되어야 합니다.
				/// 손실 객체를 거쳐 시작된 역전파는 신경망 모델의 처리 과정까지 모두 추적합니다.
				/// 따라서 이 메소드의 호출만으로 대개의 모델에서 역전파 전체가 단숨에 처리되게 됩니다.
				/// 수행된 내용을 바탕으로 처리하기 때문에 아무런 입력도 필요 없습니다.
				/// 또한 출력도 별로로 제공하지 않으며 단지 신경망 모델 내의 파라미터들에 대해 기울기 정보를 생성해 내부적으로 전달해 줍니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void backward();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서에 저장된 순전파 처리 과정을 역추적해 역전파 처리를 수행합니다.
				/// 이 메소드는 손실 객체와 관계 없이 처리되며 따라서 순전파 처리 과정의 중간 결과들에 대해서도 호출이 가능합니다.
				/// 대신 이 메모드를 이용하려면 텐서와 같은 형상의 기울기 정보를 따로 준비해 제공해주어야 합니다.
				/// 이렇게 시작된 역전파는 텐서와 관련된 신경망 처리 과정을 추적합니다.
				/// 수행된 내용을 바탕으로 처리하기 때문에 별도의 다른 입력은 필요 없습니다.
				/// 또한 출력도 별로로 제공하지 않으며 단지 신경망 모델 내의 파라미터들에 대해 기울기 정보를 생성해 내부적으로 전달해 줍니다.
				///
				/// @param 	grad	텐서 객체와 같은 형상을 갖는 32비트 실수형의 기울기 텐서
				/// 				
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void backward_with_gradient(Tensor grad);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터들을 임의의 순서로 재배치합니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void shuffle();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// src 텐서로부터 지정된 행의 데이터들을 복사해 텐서 데이터로 저장합니다.
				///
				/// @param src  	텐서 데이터를 복사해 올 원시 텐서
				/// @param pnMap	원시 텐서에서의 행 번호들을 담은 size 크기의 배열 시작 주소
				/// @param size	   	복사해 올 행의 개수, 1 또는 텐서 형상의 첫 번째 축 크기
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void fetch_idx_rows(Tensor src, int64* pnMap, int64 size);
				ECO_API void fetch_idx_rows(Tensor src, int* pnMap, int64 size);
				ECO_API void copy_into_row(int64 nthRow, Tensor src);
				////////////////////////////////////////////////////////////////////////////////////////////////////				
				/// 텐서 내용을 stdout 스트림으로 출력합니다.
				///
				/// @param 	title	출력 내용 서두에 붙일 제목
				/// @param 	full 	텐서 내용을 크기에 관계 없이 모두 출력할지 여부
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void dump(string title, bool full);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 내용 출력을 준비하되 직접 출력하는 대신 출력할 내용을 문자열 변수 값으로 반환합니다.
				///
				/// @param 	title	출력 내용 서두에 붙일 제목
				/// @param 	full 	텐서 내용을 크기에 관계 없이 모두 출력할지 여부
				///
				/// @returns	출력에 해당하는 내용의 문자자열
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API string get_dump_str(string title, bool full);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터를 모두 0으로 초기화합니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void reset();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터에서 지정된 행 내용을 복사해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 데이터의 행이라 함은 텐서 형상 첫 번째 축에 의해 구분되는 각 데이터 영역들을 말합니다.
				///
				/// @param 	index	새로운 텐서에 담을 데이터 행 번호
				///
				/// @returns	세로 구성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator[](int64 index);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터에서 지정된 행들의 내용을 복사해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 데이터의 행이라 함은 텐서 형상 첫 번째 축에 의해 구분되는 각 데이터 영역들을 말합니다.
				///
				/// @param 	index	새로운 텐서에 담을 데이터 행 번호들을 담은 인덱스 텐서
				///
				/// @returns	세로 구성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////
				ECO_API Tensor operator[](Tensor index);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 타입을 지정된 타입으로 변경하고 텐서 데이터 내용을 형변환해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입이 지정된 타입과 일치하면 현재의 텐서 객체를 그대로 반환합니다.
				///
				/// @param 	type  	새로 부여할 텐서 데이터 타입
				/// @param 	option	uchar 타입을 float32 타입으로 변환할 때 "unit"을 지정하면 -1.0~1.0 사이의 값으로, "posunit"을 지정하면 0~1.0 사이의 값으로 변환
				///
				/// @returns	세로 구성된 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor to_type(VDataType type, string option);
				ECO_API Tensor to_type(string type, string option);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터를 담은 메모리 블록의 시작 주소를 반환합니다.
				///
				/// @returns	텐서 데이터를 담은 메모리 블록 시작 주소
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void* void_ptr();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터를 담은 메모리 블록의 시작 주소를 32비트 정수형 포인터 값으로 반환합니다.
				/// 단, 텐서 데이터 타입이 32비트 정수형이어야 합니다.
				///
				/// @returns	텐서 데이터를 담은 메모리 블록 시작 주소
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int* int_ptr();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터를 담은 메모리 블록의 시작 주소를 64비트 정수형 포인터 값으로 반환합니다.
				/// 단, 텐서 데이터 타입이 64비트 정수형이어야 합니다.
				///
				/// @returns	텐서 데이터를 담은 메모리 블록 시작 주소
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int64* int64_ptr();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터를 담은 메모리 블록의 시작 주소를 32비트 실수형 포인터 값으로 반환합니다.
				/// 단, 텐서 데이터 타입이 32비트 실수형이어야 합니다.
				///
				/// @returns	텐서 데이터를 담은 메모리 블록 시작 주소
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API float* float_ptr();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터를 담은 메모리 블록의 시작 주소를 부호 없는 8비트 문자형 포인터 값으로 반환합니다.
				/// 단, 텐서 데이터 타입이 부호 없는 8비트 문자형이어야 합니다.
				///
				/// @returns	텐서 데이터를 담은 메모리 블록 시작 주소
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API unsigned char* uchar_ptr();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터를 담은 메모리 블록의 시작 주소를 8비트 부울형 포인터 값으로 반환합니다.
				/// 단, 텐서 데이터 타입이 8비트 부울형이어야 합니다.
				///
				/// @returns	텐서 데이터를 담은 메모리 블록 시작 주소
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API unsigned char* bool_ptr();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 내용을 모두 합산한 후 크기 1의 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @returns	합산 결과를 담은 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor sum();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 내용의 평균을 구한 후 크기 1의 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @returns	평균값을 담은 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor mean();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 형상을 새로운 형상으로 바꾸어 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 새로운 형상은 기본적으로 기존 형상과 같은 크기이어야 합니다.
				/// 예외적으로 하나의 -1을 포함할 수 있으며 이 -1 값은 두 형상이 같은 크기를 갖는 자연수 값으로 계산 가능해야 합니다.
				///
				/// @param 	shape	새로운 형상
				///
				/// @returns	형상 변경 결과를 담은 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor reshape(VShape shape);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 내용 가운데 axis 축을 제외한 나머지 좌표들에 대해 axis 축 데이터의 최대값 위치를 찾아 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	axis	최대값 위치를 찾을 기준 축 순번
				///
				/// @returns	처리 결과를 담은 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor argmax(int64 axis);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소의 절대값을 구해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @returns	처리 결과를 담은 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor abs();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소에 대한 시그모이드 함수값을 구해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @returns	처리 결과를 담은 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor sigmoid();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소에 대한 제곱 값을 구해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @returns	처리 결과를 담은 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor square();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소를 비교해 작지 않은 값들로 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	비교 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor max(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 형상의 행 축과 열 축을 맞바꾸어 변경하고 이에 따라 데이터를 이동시켜 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 2차원 형상의 텐서에 대해서만 지원되는 기능입니다.
				///
				/// @returns	처리 결과를 담은 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor transpose();
				ECO_API Tensor resize(VShape shape);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 입력 텐서에 담긴 이미지 데이터를 현재의 텐서 형상에 맞게 해상도를 조절하여 복사합니다.
				///
				/// @param 	x	크기 조절할 이미지  데이터를 갖는 입력 텐서
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void resize_on(Tensor x);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 입력 텐서에 담긴 데이터 형상의 두 축의 위치를 맞바꾸어주며 이에 맞게 텐서 데이터들을 이동시킵니다.
				///
				/// @param 	axis1	맞바꿀 첫번째 형상 축
				/// @param 	axis2	맞바꿀 두번째 형상 축
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void transpose_on(int64 axis1, int64 axis2);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 파일 내용을 텐서 형상에 맞추어 읽어들여 줍니다.
				///
				/// @param 	filepath	입력 이미지 파일의 경로명
				/// @param 	chn_last	이미지 파일 내용을 채널 축을 형상의 맨 뒤에 둘지 여부, false이면 (행-열, 채널) 순서로 배치
				/// @param 	transpose	이미지 파일 내용을 (행, 열) 형태로 읽어들일지 여부, false이면 (열, 행) 즉 (x, y) 순서로 배치
				/// @param 	code		색상 변환 코드, cv2.COLOR_RGB2BGR 등의 값
				/// @param 	mix			읽어들일 내용의 반영 비율, 1 미만이면 기존 내용을 (1 - mix) 비율로 반영해 합성
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void load_jpeg_pixels(string filepath, bool chn_last, bool transpose, int code, float mix);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 두 입력 텐서의 데이터 내용을 행 방향으로 쌓아 올려 현재 텐서 데이터 내용으로 저장합니다.
				///
				/// @param 	x1	앞에 저장할 첫 번째 입력 텐서
				/// @param 	x2	뒤에 저장할 두 번째 입력 텐서
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void vstack_on(Tensor x1, Tensor x2);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소를 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	비교 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator ==(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 정수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator ==(int value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 64비트 정수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator ==(int64 value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 실수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator ==(float value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소를 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	비교 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator !=(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 정수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator !=(int value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 64비트 정수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator !=(int64 value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 실수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator !=(float value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소를 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	비교 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator >(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 정수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator >(int value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 64비트 정수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator >(int64 value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 실수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator >(float value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소를 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	비교 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator >=(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 정수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator >=(int value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 64비트 정수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator >=(int64 value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 실수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator >=(float value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소를 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	비교 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator <(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 정수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator <(int value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 64비트 정수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator <(int64 value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 실수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator <(float value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소를 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	비교 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator <=(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 정수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator <=(int value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 64비트 정수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator <=(int64 value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 비교해 8비트 부울 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 실수형이어야 합니다.
				///
				/// @param 	value	비교 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator <=(float value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소에 대해 논리적 AND 연산을 수행해 0.0 혹은 1.0의 실수 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	논리 연산 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator &&(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소에 대해 논리적 OR 연산을 수행해 0.0 혹은 1.0의 실수 값으로 표현하여 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	논리 연산 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator ||(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소에 대해 비트별 AND 연산을 수행해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	논리 연산 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator &(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소에 대해 비트별 OR 연산을 수행해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	논리 연산 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator |(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소를 곱해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	연산 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator*(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 곱해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 정수형이어야 합니다.
				///
				/// @param 	value	연산 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator*(int rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 곱해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 64비트 정수형이어야 합니다.
				///
				/// @param 	value	연산 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator*(int64 rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 곱해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 실수형이어야 합니다.
				///
				/// @param 	value	연산 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator*(float rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소를 나누어 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	연산 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator/(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 나누어 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 정수형이어야 합니다.
				///
				/// @param 	value	연산 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator/(int rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 나누어 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 64비트 정수형이어야 합니다.
				///
				/// @param 	value	연산 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator/(int64 rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 나누어 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 실수형이어야 합니다.
				///
				/// @param 	value	연산 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator/(float rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소를 더해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	연산 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator+(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 더해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 실수형이어야 합니다.
				///
				/// @param 	value	연산 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator+(float rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 더해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 정수형이어야 합니다.
				///
				/// @param 	value	연산 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator+(int rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 더해 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 64비트 정수형이어야 합니다.
				///
				/// @param 	value	연산 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator+(int64 rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 같은 위치의 rhs 원소를 빼 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				///
				/// @param 	rhs	연산 대상이 될 같은 형상, 같은 데이터 타입의 텐서 객체
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator-(Tensor rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 빼 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 정수형이어야 합니다.
				///
				/// @param 	value	연산 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator-(int rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 빼 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 64비트 정수형이어야 합니다.
				///
				/// @param 	value	연산 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator-(int64 rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 각 원소와 지정된 값을 빼 새로운 텐서 구조를 구성한 후 객체로 반환합니다.
				/// 텐서 데이터 타입은 32비트 실수형이어야 합니다.
				///
				/// @param 	value	연산 대상이 될 값
				///
				/// @returns	처리 결과를 담은 실수형 텐서 객체.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor operator-(float rhs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 가운데 지정된 위치의 원소 값을 지정된 값으로 변경합니다.
				///
				/// @param 	pos  	텐서 원소의 위치, 다차원 형상의 경우 행우선 방식으로 계산된 위치
				/// @param 	value	지정된 위치에 대치할 원소 값
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void set_element(int64 pos, VValue value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 가운데 지정된 위치의 원소 값들을 지정된 값으로 변경합니다.
				///
				/// @param 	pos  	텐서 원소의 위치, 텐서의 형상 차원 크기만큼의 리스트로 각 차원의 위치를 지정
				/// @param 	value	지정된 위치에 대치할 원소 값
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void set_element(VList pos, VValue value);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 가운데 지정된 위치의 원소 값들을 포인터로 주어진 배열 데이터 내용으로 변경합니다.
				///
				/// @param 	sliceIndex	텐서 원소의 위치, 텐서의 형상 차원 크기만큼의 리스트로 각 차원의 위치를 지정
				/// @param 	type		지정된 위치에 대치할 배열 원소 값들의 데이터 타입
				/// @param 	datSize		지정된 위치에 대치할 원소 값들의 갯수, 값을 받을 원소 갯수와 대조 점검용
				/// @param 	value_ptr	지정된 위치에 대치할 원소 값들을 담은 배열의 시작 위치
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void set_slice(VList sliceIndex, VDataType type, int64 datSize, void* value_ptr);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 가운데 지정된 위치의 원소 값을 반환합니다.
				///
				/// @param 	pos  	텐서 원소의 위치, 다차원 형상의 경우 행우선 방식으로 계산된 위치
				///
				/// @returns	지정된 위치의 원소 값
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VValue get_element(int64 pos);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 가운데 지정된 위치의 원소 값을 반환합니다.
				///
				/// @param 	pos  	텐서 원소의 위치, 텐서의 형상 차원 크기만큼의 리스트로 각 차원의 위치를 지정
				///
				/// @returns	지정된 위치의 원소 값
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VValue get_element(VList pos);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 데이터 가운데 지정된 슬라이스 구역의 원소 값들로 구성된 텐서를 생성하여 반환합니다.
				///
				/// @param 	sliceIndex 	텐서 원소의 위치, 텐서의 형상 차원 크기만큼의 리스트로 각 차원의 위치를 지정
				///
				/// @returns	지정된 위치의 원소 값들로 구성된 새로운 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor get_slice(VList sliceIndex);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// src 데이터의 내용 전체를 텐서 데이터 내용의 전체 혹은 일부로 복사한다.
				/// 이 때 복사되는 시작 위치는 텐서 데이터 내용의시작 위치로 한다.
				///
				/// @param 	src	데이터 내용을 복사해올 원시 텐서 객체
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void copy_partial_data(Tensor src);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// src 데이터의 내용 중 특정 행을 텐서 데이터 내용의 지정된 행 위치로 복사한다.
				/// 행의 크기는 텐서 객체 형상에 따라 결정하며 src 객체는 이에 부합되는 형상을 가져야 한다.
				///
				/// @param 	destRow	복사할 값이 저장될 텐서 데이터에서의 행 번호
				/// @param 	src	   	복사 내용을 제공할 텐서 객체
				/// @param 	srcRows	복사할 값을 제공할 src 텐서 데이터에서의 행 번호
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void copy_row_from(int64 destRow, Tensor src, int64 srcRows);
				
				ECO_API void shift_timestep_to_right(Tensor src, int64 steps);				
			};

			class Function : public Object {
			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Function 클래스의 공백 생성자입니다.
				/// 코어 객체 내용이 비어있는 텐서 객체를 생성하고 객체를 반환합니다.
				/// 비어있는 객체 생성자는 Function 틀래스 객체를 멤버로 갖는 새로운 클래스를 만들 때 필요합니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Function();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Function 클래스의 코어 전달 생성자입니다.
				/// Function 클래스 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 이 생성자는 다른 캡슐 객체의 getCore() 메소드나 getClone() 메소드로 추출된 코어 객체 포인터를 이용해 새로운 캡슐 객체를 생성합니다.
				/// 이 때 코어 객체의 참조계수가 1 증가하며 증가된 값은 캡슐 객체가 파괴될 때 감소합니다.
				/// Function 클래스 객체들은 NN 클래스 메소드를 통해 생성되며 공백 생성자 외에 새로운 객체를 직접 생성하는 별도의 생성자는 존재하지 않습니다.
				///
				/// @param core	생성되는 클래스 객체가 내부에 가져야 할 코어 객체의 포인터입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Function(void* core);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Function 클래스의 복사생성자입니다.
				///
				/// @param 	a	복사할 원본 객체 참조 변수입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Function(const Function& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Function 클래스의 치환 연산자입니다.
				///
				/// @param 	a	치환에 이용할 원본 객체 참조 변수입니다.
				///
				/// @returns	연속된 치환이 가능하도록 치환된 객체의 참조 주소를 반환합니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Function& operator=(const Function& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Function 클래스 객체를 파괴합니다.
				/// Function 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 캡슐 객체의 파괴는 코어 객체의 참조계수를 감소시키며 참조계수가 0이 될 때에만 실제 코어 객체가 파괴됩니다.
				///
				/// @returns	파괴자는 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API ~Function();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Function 클래스 객체에 연결된 엔진 객체의 고유번호를 반환합니다.
				/// 디버깅 등의 목적에 사용 가능합니다.
				///
				/// @returns	엔진에서의 객체 고유번호, 해당 객체가 없으면 -1
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int get_engine_id();

			public:
				ECO_API Function(NN nn, string sBuiltin, string sName, VDict kwArgs);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Function 객체의 이름을 반환합니다.
				///
				/// @returns	Function 객체의 이름
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API string get_inst_name();
			};

			class Metric : public Object {
			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Metric 클래스의 공백 생성자입니다.
				/// 코어 객체 내용이 비어있는 텐서 객체를 생성하고 객체를 반환합니다.
				/// 비어있는 객체 생성자는 Metric 틀래스 객체를 멤버로 갖는 새로운 클래스를 만들 때 필요합니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Metric();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Metric 클래스의 코어 전달 생성자입니다.
				/// Metric 클래스 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 이 생성자는 다른 캡슐 객체의 getCore() 메소드나 getClone() 메소드로 추출된 코어 객체 포인터를 이용해 새로운 캡슐 객체를 생성합니다.
				/// 이 때 코어 객체의 참조계수가 1 증가하며 증가된 값은 캡슐 객체가 파괴될 때 감소합니다.
				/// Metric 클래스 객체들은 NN 클래스 메소드를 통해 생성되며 공백 생성자 외에 새로운 객체를 직접 생성하는 별도의 생성자는 존재하지 않습니다.
				///
				/// @param core	생성되는 클래스 객체가 내부에 가져야 할 코어 객체의 포인터입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Metric(void* core);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Metric 클래스의 복사생성자입니다.
				///
				/// @param 	a	복사할 원본 객체 참조 변수입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Metric(const Metric& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Metric 클래스의 치환 연산자입니다.
				///
				/// @param 	a	치환에 이용할 원본 객체 참조 변수입니다.
				///
				/// @returns	연속된 치환이 가능하도록 치환된 객체의 참조 주소를 반환합니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Metric& operator=(const Metric& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Metric 클래스 객체를 파괴합니다.
				/// Metric 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 캡슐 객체의 파괴는 코어 객체의 참조계수를 감소시키며 참조계수가 0이 될 때에만 실제 코어 객체가 파괴됩니다.
				///
				/// @returns	파괴자는 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API ~Metric();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Metric 클래스 객체에 연결된 엔진 객체의 고유번호를 반환합니다.
				/// 디버깅 등의 목적에 사용 가능합니다.
				///
				/// @returns	엔진에서의 객체 고유번호, 해당 객체가 없으면 -1
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API int get_engine_id();

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 단일 텐서를 입력으로 하여 신경망 출력에서 하나의 정량치를 계산하는 Metric 객체의 처리 과정을 호출합니다.
				///
				/// @param 	pred	정량치 계산에 이용할 입력 텐서
				///
				/// @returns	계산 결과를 단일 성분으로 하는 정량치 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor __call__(Tensor pred);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 목록을 입력으로 하여 신경망 출력에서 각종 정량치를 계산하는 Metric 객체의 처리 과정을 호출합니다.
				///
				/// @param 	preds	정량치 계산에 이용할 입력 텐서 목록
				///
				/// @returns	계산 결과를 단일 성분으로 하는 정량치 텐서 객체들의 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API TensorDict __call__(TensorDict preds);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텐서 목록을 입력으로 하여 신경망 출력에서 각종 정량치를 계산하는 Metric 객체의 처리 과정을 호출합니다.
				/// 기본적으로 __call__() 메소드와 같은 기능을 수행하지만 virtual 함수이기 때문에 파생클래스 선언에 의한 오버라이딩이 가능하다.
				///
				/// @param 	preds	정량치 계산에 이용할 입력 텐서 목록
				///
				/// @returns	계산 결과를 단일 성분으로 하는 정량치 텐서 객체들의 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API virtual TensorDict evaluate(TensorDict preds);
			};

			class Scalar : public Object {
			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Scalar 클래스의 공백 생성자입니다.
				/// 코어 객체 내용이 비어있는 텐서 객체를 생성하고 객체를 반환합니다.
				/// 비어있는 객체 생성자는 Scalar 틀래스 객체를 멤버로 갖는 새로운 클래스를 만들 때 필요합니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Scalar();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Scalar 클래스의 코어 전달 생성자입니다.
				/// Scalar 클래스 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 이 생성자는 다른 캡슐 객체의 getCore() 메소드나 getClone() 메소드로 추출된 코어 객체 포인터를 이용해 새로운 캡슐 객체를 생성합니다.
				/// 이 때 코어 객체의 참조계수가 1 증가하며 증가된 값은 캡슐 객체가 파괴될 때 감소합니다.
				/// Scalar 클래스 객체들은 Tensor 클래스 메소드를 통해 생성되며 공백 생성자 외에 새로운 객체를 직접 생성하는 별도의 생성자는 존재하지 않습니다.
				///
				/// @param core	생성되는 클래스 객체가 내부에 가져야 할 코어 객체의 포인터입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Scalar(void* core);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Scalar 클래스의 복사생성자입니다.
				///
				/// @param 	a	복사할 원본 객체 참조 변수입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Scalar(const Scalar& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Scalar 클래스의 치환 연산자입니다.
				///
				/// @param 	a	치환에 이용할 원본 객체 참조 변수입니다.
				///
				/// @returns	연속된 치환이 가능하도록 치환된 객체의 참조 주소를 반환합니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Scalar& operator=(const Scalar& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Scalar 클래스 객체를 파괴합니다.
				/// Scalar 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 캡슐 객체의 파괴는 코어 객체의 참조계수를 감소시키며 참조계수가 0이 될 때에만 실제 코어 객체가 파괴됩니다.
				///
				/// @returns	파괴자는 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API ~Scalar();

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 스칼라 객체에 저장된 값을 반환합니다.
				///
				/// @returns	스칼라 객체에 저장된 값
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API operator float() const;
			};

			class Account : public Object {
			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Account 클래스의 공백 생성자입니다.
				/// 코어 객체 내용이 비어있는 텐서 객체를 생성하고 객체를 반환합니다.
				/// 비어있는 객체 생성자는 Account 틀래스 객체를 멤버로 갖는 새로운 클래스를 만들 때 필요합니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Account();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Account 클래스의 코어 전달 생성자입니다.
				/// Account 클래스 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 이 생성자는 다른 캡슐 객체의 getCore() 메소드나 getClone() 메소드로 추출된 코어 객체 포인터를 이용해 새로운 캡슐 객체를 생성합니다.
				/// 이 때 코어 객체의 참조계수가 1 증가하며 증가된 값은 캡슐 객체가 파괴될 때 감소합니다.
				/// Account 클래스 객체들은 NN 클래스 메소드를 통해 생성되며 공백 생성자 외에 새로운 객체를 직접 생성하는 별도의 생성자는 존재하지 않습니다.
				///
				/// @param core	생성되는 클래스 객체가 내부에 가져야 할 코어 객체의 포인터입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Account(void* core);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Account 클래스의 복사생성자입니다.
				///
				/// @param 	a	복사할 원본 객체 참조 변수입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Account(const Account& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Account 클래스의 치환 연산자입니다.
				///
				/// @param 	a	치환에 이용할 원본 객체 참조 변수입니다.
				///
				/// @returns	연속된 치환이 가능하도록 치환된 객체의 참조 주소를 반환합니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Account& operator=(const Account& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// Account 클래스 객체를 파괴합니다.
				/// Account 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 캡슐 객체의 파괴는 코어 객체의 참조계수를 감소시키며 참조계수가 0이 될 때에만 실제 코어 객체가 파괴됩니다.
				///
				/// @returns	파괴자는 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API ~Account();

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 사용자 계정에 로그인합니다.
				///
				/// @param 	username	로그인에 사용할 사용자명
				/// @param 	password	로그인에 사용할 비밀번호
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void login(string username, string password);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 사용자 계정으로부터 로그아웃합니다.
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void logout();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 새로운 사용자 계정을 생성합니다.
				///
				/// @param 	username	생성할 사용자 계정의 사용자명.
				/// @param 	password	생성할 사용자 계정의 비밀번호
				/// @param 	email   	생성할 사용자 계정에 등록할 이메일 주소
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void registrate(string username, string password, string email);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 등록된 사용자 계정들의 사용자명 리스트를 반환합니다. 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @returns	사용자명 리스트
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VList get_user_list();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 지정된 사용자의 사용자 정보 목록을 반환합니다. 본인이나 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @param 	username	정보를 조회할 계정의 사용자명, 공백 문자열이면 로그인 사용자 자신ㅇ\The username.
				///
				/// @returns	사용자 정보 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VDict get_user_info(string username);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 지정된 사용자의 사용자 정보를 수정합니다. 본인이나 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @param 	userInfo	수정할 정보 내역을 담은 정보 목록
				/// @param 	username	정보를 조회할 계정의 사용자명, 공백 문자열이면 로그인 사용자 자신
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void set_user_info(VDict userInfo, string username);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 지정된 사용자명의 사용자 게정을 삭제합니다. 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @param 	username	삭제할 계정의 사용자명
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void remove_user(string username);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모델 베이스에 설정된 모든 역할의 목록을 반환합니다. 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @returns	모든 역할의 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VList get_roles();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 사용자에게 할당된 역할의 목록을 반환합니다. 본인이나 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @param 	username	역할을 조회할 사용자명, 공백 문자열이면 로그인 사용자 자신
				///
				/// @returns	사용자에게 할당된 역할의 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VList get_user_roles(string username);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 역할에 배정된 모든 권한의 목록을 반환합니다. 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @param 	rolename	역할 이름
				///
				/// @returns	역할에 배정된 권한의 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VList get_role_permissions(string rolename);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 사용자가 자신의 역할을 통해 갖고 있는 모든 권한의 목록을 반환합니다. 본인이나 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @param 	username	권한을 조회할 사용자명, 공백 문자열이면 로그인 사용자 자신
				///
				/// @returns	사용자가 보유한 권한의 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VList get_user_permissions(string username);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모델 베이스에 새로운 역할을 생성합니다. 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @param 	rolename	생성할 역할 이름
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void add_role(string rolename);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모델 베이스에 등록된 역할을 삭제합니다. 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @param 	rolename	삭제할 역할 이름
				/// @param 	force   	사용중인 역할인 경우에도 강제로 삭제할지 여부
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void rem_role(string rolename, bool force);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 사용자에게 새로운 역할을 추가합니다. 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @param 	rolename	추가할 역할 이름
				/// @param 	username	역할을 부여할 사용자명, 공백 문자열이면 로그인 사용자 자신
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void add_user_role(string username, string rolename);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 사용자에게 부여되었던 역할을 회수합니다. 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @param 	rolename	회수할 역할 이름
				/// @param 	username	역할을 회수할 사용자명, 공백 문자열이면 로그인 사용자 자신
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void rem_user_role(string username, string rolename);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 역할에 새로운 권한을 부여합니다. 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @param 	rolename  	권한을 부여할 역할의 이름
				/// @param 	permission	역할에 부여할 권한의 이름
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void add_role_permission(string rolename, string permission);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 역할에 부여하였던 권한을 회수합니다. 권한이 있는 사용자에게만 지원되는 기능입니다.
				///
				/// @param 	rolename  	권한을 회수할 역할의 이름
				/// @param 	permission	회수할 권한의 이름
				///
				/// @returns	없음
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void rem_role_permission(string rolename, string permission);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모듈 객체를 루트로 하는 모델 구조를 모델 베이스에 등록합니다.
				///
				/// @param 	model	 	모델의 루츠 역할을 하는 모듈 객체
				/// @param 	name	 	모델 베이스에서 등록된 모델에 부여할 이름
				/// @param 	desc	 	모델 베이스에 저장될 모델에 대한 소개 문자열
				/// @param 	is_public	다른 사용자의 모델 레코드 접근을 허용할지 여부
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API void regist_model(Module model, string name, string desc, bool is_public);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 현재 사용자가 접근 권한이 있는 모든 모델의 목록을 반환합니다.
				///
				/// @returns	접근 권한이 있는 모델의 목록
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API VList get_model_list();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모델 베이스에 등록된 모델 레코드 내용을 조회해 이에 해당하는 모듈 객체를 구성하고 이를 반환합니다.
				///
				/// @param 	mid	모델 목록으로부터 확인 가능한 모델의 식별 번호
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module fetch_model(int mid);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 모델 베이스에 등록된 모델 레코드 내용을 조회해 이에 해당하는 모듈 객체를 구성하고 이를 반환합니다.
				///
				/// @param 	name	모델 목록으로부터 확인 가능한 모델의 이름
				///
				/// @returns	생성된 모듈 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Module fetch_model(string name);
			};

			class AudioSpectrumReader : public Object {
			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// AudioFileReader 클래스의 공백 생성자입니다.
				/// 코어 객체 내용이 비어있는 텐서 객체를 생성하고 객체를 반환합니다.
				/// 비어있는 객체 생성자는 AudioFileReader 틀래스 객체를 멤버로 갖는 새로운 클래스를 만들 때 필요합니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API AudioSpectrumReader();

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// AudioFileReader 클래스의 코어 전달 생성자입니다.
				/// AudioFileReader 클래스 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 이 생성자는 다른 캡슐 객체의 getCore() 메소드나 getClone() 메소드로 추출된 코어 객체 포인터를 이용해 새로운 캡슐 객체를 생성합니다.
				/// 이 때 코어 객체의 참조계수가 1 증가하며 증가된 값은 캡슐 객체가 파괴될 때 감소합니다.
				/// AudioFileReader 클래스 객체들은 NN 클래스 메소드를 통해 생성되며 공백 생성자 외에 새로운 객체를 직접 생성하는 별도의 생성자는 존재하지 않습니다.
				///
				/// @param core	생성되는 클래스 객체가 내부에 가져야 할 코어 객체의 포인터입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API AudioSpectrumReader(void* core);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// AudioFileReader 클래스의 복사생성자입니다.
				///
				/// @param 	a	복사할 원본 객체 참조 변수입니다.
				///
				/// @returns	생성자는 별도의 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API AudioSpectrumReader(const AudioSpectrumReader& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// AudioFileReader 클래스의 치환 연산자입니다.
				///
				/// @param 	a	치환에 이용할 원본 객체 참조 변수입니다.
				///
				/// @returns	연속된 치환이 가능하도록 치환된 객체의 참조 주소를 반환합니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API AudioSpectrumReader& operator=(const AudioSpectrumReader& a);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// AudioFileReader 클래스 객체를 파괴합니다.
				/// AudioFileReader 객체는 API 지원을 위한 캡슐 객체로서 실제 내용은 내부의 코어 객체에서 관리됩니다.
				/// 캡슐 객체의 파괴는 코어 객체의 참조계수를 감소시키며 참조계수가 0이 될 때에만 실제 코어 객체가 파괴됩니다.
				///
				/// @returns	파괴자는 반환값이 없습니다.
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API ~AudioSpectrumReader();

			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 오디오 파일 리더에 처리 대상 파일을 추가합니다.
				///
				/// @param 	filePath	처리 대상 오디오 파일의 경로
				///
				/// @returns	처리가 가능한지 여부
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API bool add_file(string filePath);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 처리 대상으로 추가된 오디오 파일들을 대상으로 FFT 분석을 수행하고 그 결과를 반환합니다.
				///
				/// @param 	ment	주요 작업 시점을 알려주는 안내 메시지 출력 여부 지정
				///
				/// @returns	주파수 스펙트럼 분석 결과를 담은 텐서 객체
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API Tensor get_fft_spectrums(bool ment);
			};

			class Util {
			public:

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// JSON 형식의 파일을 파싱하여 목록 또는 값 구조 등의 값으로 반환합니다.
				///
				/// @param 	filePath	분석 대상 파일의 경로
				///
				/// @returns	JSON 파일 내용에 상응하는 가변 형식 값 구조
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API static VValue parse_json_file(string filePath);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// JSON 나열 형식의 파일을 파싱하여 목록 구조로 반환합니다.
				///
				/// @param 	filePath	분석 대상 파일의 경로
				///
				/// @returns	일련의 JSON 항목들에 상응하는 리스트 구조
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API static VList parse_jsonl_file(string filePath);

				////////////////////////////////////////////////////////////////////////////////////////////////////
				/// 텍스트 형식의 파일을 읽어 라인 문자열 단위의 리스트 구조로 반환합니다.
				///
				/// @param 	filePath	읽어들일 파일의 경로
				///
				/// @returns	읽어들인 파일의 문자열 내용에 상응하는 리스트 구조
				////////////////////////////////////////////////////////////////////////////////////////////////////

				ECO_API static StringList read_file_lines(string filePath);
				ECO_API static void save_data(NN nn, VValue data, string filePath);
				ECO_API static VValue load_data(NN nn, string filePath);
			};
		};

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// (테스팅) 원격 접속용 서버를 오픈한다
		/// 			
		/// @returns	없음
		////////////////////////////////////////////////////////////////////////////////////////////////////

		ECO_API void open_server(string server_url, int port);

	};

#ifdef __cplusplus
}
#endif
